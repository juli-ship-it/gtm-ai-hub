// Script to update execution instructions for all templates
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function updateExecutionInstructions() {
  console.log('üîÑ Updating execution instructions for all templates...')
  
  try {
    // First, let's see what we have
    const { data: templates, error: fetchError } = await supabase
      .from('template')
      .select('id, name, execution_instructions')
    
    if (fetchError) throw fetchError
    
    console.log(`üìä Found ${templates.length} templates to update`)
    
    // Update each template
    for (const template of templates) {
      const newInstructions = `Step-by-Step Instructions:

1. Initial Setup
‚Ä¢ Review the workflow requirements and variables
‚Ä¢ Ensure you have access to all required systems
‚Ä¢ Gather necessary credentials and API keys

2. Configuration
‚Ä¢ Configure schedule settings (if applicable)
‚Ä¢ Set up data source connections
‚Ä¢ Configure data destination settings (Excel, Google Sheets, etc.)
‚Ä¢ Set up notification preferences

3. Variable Configuration
‚Ä¢ Fill in all required template variables
‚Ä¢ Test connections to external systems
‚Ä¢ Verify data mapping and transformations

4. Testing & Deployment
‚Ä¢ Run the workflow in test mode
‚Ä¢ Verify data output and format
‚Ä¢ Set up monitoring and alerts
‚Ä¢ Deploy to production environment

5. Maintenance
‚Ä¢ Monitor workflow performance
‚Ä¢ Update credentials as needed
‚Ä¢ Review and optimize data processing
‚Ä¢ Keep documentation up to date

${template.execution_instructions ? `\nOriginal Instructions:\n${template.execution_instructions}` : ''}`

      const { error: updateError } = await supabase
        .from('template')
        .update({ execution_instructions: newInstructions })
        .eq('id', template.id)
      
      if (updateError) {
        console.error(`‚ùå Failed to update template ${template.name}:`, updateError)
      } else {
        console.log(`‚úÖ Updated template: ${template.name}`)
      }
    }
    
    console.log('üéâ All templates updated successfully!')
    
  } catch (error) {
    console.error('‚ùå Error updating templates:', error)
  }
}

updateExecutionInstructions()
